"""Add intelligence models for Phase 2 Step 1

Revision ID: 04d7b4977e0c
Revises: 8eac3573d2af
Create Date: 2025-07-23 14:51:38.847020

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '04d7b4977e0c'
down_revision: Union[str, None] = '8eac3573d2af'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('funder_profiles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('funder_name', sa.String(), nullable=False),
    sa.Column('mission_statement', sa.Text(), nullable=True),
    sa.Column('sdg_alignment', sa.JSON(), nullable=True),
    sa.Column('strategic_priorities', sa.JSON(), nullable=True),
    sa.Column('success_patterns', sa.JSON(), nullable=True),
    sa.Column('average_grant_amount', sa.Float(), nullable=True),
    sa.Column('success_rate', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_funder_profiles_funder_name'), 'funder_profiles', ['funder_name'], unique=True)
    op.create_index(op.f('ix_funder_profiles_id'), 'funder_profiles', ['id'], unique=False)
    op.create_table('predictive_models',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('model_name', sa.String(), nullable=False),
    sa.Column('model_version', sa.String(), nullable=False),
    sa.Column('model_type', sa.String(), nullable=False),
    sa.Column('model_data', sa.JSON(), nullable=True),
    sa.Column('accuracy_score', sa.Float(), nullable=True),
    sa.Column('feature_importance', sa.JSON(), nullable=True),
    sa.Column('training_data_size', sa.Integer(), nullable=True),
    sa.Column('last_trained', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_predictive_models_id'), 'predictive_models', ['id'], unique=False)
    op.create_table('sector_analytics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sector_name', sa.String(), nullable=False),
    sa.Column('total_grants', sa.Integer(), nullable=True),
    sa.Column('total_funding', sa.Float(), nullable=True),
    sa.Column('average_success_rate', sa.Float(), nullable=True),
    sa.Column('seasonality_pattern', sa.JSON(), nullable=True),
    sa.Column('trend_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sector_analytics_id'), 'sector_analytics', ['id'], unique=False)
    op.create_index(op.f('ix_sector_analytics_sector_name'), 'sector_analytics', ['sector_name'], unique=False)
    op.create_table('grant_success_metrics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('grant_id', sa.Integer(), nullable=True),
    sa.Column('success_probability', sa.Float(), nullable=False),
    sa.Column('confidence_score', sa.Float(), nullable=False),
    sa.Column('prediction_features', sa.JSON(), nullable=True),
    sa.Column('model_version', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['grant_id'], ['grants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_grant_success_metrics_id'), 'grant_success_metrics', ['id'], unique=False)
    op.drop_index('ix_project_id', table_name='project')
    op.drop_index('ix_project_name', table_name='project')
    op.drop_table('project')
    op.drop_index('ix_team_member_id', table_name='team_member')
    op.drop_table('team_member')
    op.drop_index('ix_task_comment_id', table_name='task_comment')
    op.drop_table('task_comment')
    op.drop_index('ix_metric_id', table_name='metric')
    op.drop_index('ix_metric_name', table_name='metric')
    op.drop_table('metric')
    op.drop_index('ix_user_email', table_name='user')
    op.drop_index('ix_user_id', table_name='user')
    op.drop_table('user')
    op.drop_index('ix_time_entry_id', table_name='time_entry')
    op.drop_table('time_entry')
    op.drop_index('ix_program_logic_id', table_name='program_logic')
    op.drop_table('program_logic')
    op.drop_index('ix_reaction_comment_id', table_name='reaction')
    op.drop_index('ix_reaction_id', table_name='reaction')
    op.drop_index('ix_reaction_user_id', table_name='reaction')
    op.drop_table('reaction')
    op.drop_index('ix_task_id', table_name='task')
    op.drop_table('task')
    op.add_column('grants', sa.Column('predicted_success_rate', sa.Float(), nullable=True))
    op.add_column('grants', sa.Column('recommendation_score', sa.Float(), nullable=True))
    op.add_column('grants', sa.Column('risk_assessment', sa.JSON(), nullable=True))
    op.add_column('grants', sa.Column('sector_tags', sa.JSON(), nullable=True))
    op.add_column('grants', sa.Column('sdg_alignment', sa.JSON(), nullable=True))
    op.add_column('grants', sa.Column('strategic_priorities', sa.JSON(), nullable=True))
    op.drop_constraint('grants_created_by_id_fkey', 'grants', type_='foreignkey')
    op.drop_constraint('project_tags_project_id_fkey', 'project_tags', type_='foreignkey')
    op.create_foreign_key(None, 'project_tags', 'projects', ['project_id'], ['id'], ondelete='CASCADE')
    op.alter_column('scraper_logs', 'grants_found',
               existing_type=sa.INTEGER(),
               server_default=None,
               nullable=True)
    op.alter_column('scraper_logs', 'grants_added',
               existing_type=sa.INTEGER(),
               server_default=None,
               nullable=True)
    op.alter_column('scraper_logs', 'grants_updated',
               existing_type=sa.INTEGER(),
               server_default=None,
               nullable=True)
    op.drop_index('ix_tags_category', table_name='tags')
    op.drop_index('ix_tags_name', table_name='tags')
    op.create_unique_constraint(None, 'tags', ['name'])
    op.drop_constraint('tags_created_by_id_fkey', 'tags', type_='foreignkey')
    op.drop_constraint('tags_parent_id_fkey', 'tags', type_='foreignkey')
    op.drop_column('tags', 'updated_at')
    op.drop_column('tags', 'synonyms')
    op.drop_column('tags', 'created_by_id')
    op.drop_column('tags', 'category')
    op.drop_column('tags', 'parent_id')
    op.drop_column('tags', 'description')
    op.drop_column('tags', 'created_at')
    op.drop_constraint('task_tags_task_id_fkey', 'task_tags', type_='foreignkey')
    op.create_foreign_key(None, 'task_tags', 'tasks', ['task_id'], ['id'], ondelete='CASCADE')
    op.add_column('user_profiles', sa.Column('organisation_name', sa.String(length=255), nullable=False))
    op.add_column('user_profiles', sa.Column('organisation_type', sa.String(length=100), nullable=False))
    op.alter_column('user_profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('now()'),
               existing_nullable=False)
    op.alter_column('user_profiles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=sa.text('now()'),
               existing_nullable=False)
    op.drop_constraint('user_profiles_user_id_fkey', 'user_profiles', type_='foreignkey')
    op.create_foreign_key(None, 'user_profiles', 'users', ['user_id'], ['id'])
    op.drop_column('user_profiles', 'organization_name')
    op.drop_column('user_profiles', 'organization_type')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user_profiles', sa.Column('organization_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('user_profiles', sa.Column('organization_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'user_profiles', type_='foreignkey')
    op.create_foreign_key('user_profiles_user_id_fkey', 'user_profiles', 'users', ['user_id'], ['id'], ondelete='SET NULL')
    op.alter_column('user_profiles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('user_profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               server_default=None,
               existing_nullable=False)
    op.drop_column('user_profiles', 'organisation_type')
    op.drop_column('user_profiles', 'organisation_name')
    op.drop_constraint(None, 'task_tags', type_='foreignkey')
    op.create_foreign_key('task_tags_task_id_fkey', 'task_tags', 'task', ['task_id'], ['id'], ondelete='CASCADE')
    op.add_column('tags', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('tags', sa.Column('description', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('tags', sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('tags', sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.add_column('tags', sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('tags', sa.Column('synonyms', sa.VARCHAR(length=1000), autoincrement=False, nullable=True))
    op.add_column('tags', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.create_foreign_key('tags_parent_id_fkey', 'tags', 'tags', ['parent_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key('tags_created_by_id_fkey', 'tags', 'user', ['created_by_id'], ['id'], ondelete='SET NULL')
    op.drop_constraint(None, 'tags', type_='unique')
    op.create_index('ix_tags_name', 'tags', ['name'], unique=True)
    op.create_index('ix_tags_category', 'tags', ['category'], unique=False)
    op.alter_column('scraper_logs', 'grants_updated',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               nullable=False)
    op.alter_column('scraper_logs', 'grants_added',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               nullable=False)
    op.alter_column('scraper_logs', 'grants_found',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               nullable=False)
    op.drop_constraint(None, 'project_tags', type_='foreignkey')
    op.create_foreign_key('project_tags_project_id_fkey', 'project_tags', 'project', ['project_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('grants_created_by_id_fkey', 'grants', 'user', ['created_by_id'], ['id'], ondelete='SET NULL')
    op.drop_column('grants', 'strategic_priorities')
    op.drop_column('grants', 'sdg_alignment')
    op.drop_column('grants', 'sector_tags')
    op.drop_column('grants', 'risk_assessment')
    op.drop_column('grants', 'recommendation_score')
    op.drop_column('grants', 'predicted_success_rate')
    op.create_table('task',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('task_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('priority', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('due_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('estimated_hours', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('actual_hours', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('creator_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('assignee_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('attachments', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.CheckConstraint("priority::text = ANY (ARRAY['low'::character varying, 'medium'::character varying, 'high'::character varying, 'urgent'::character varying]::text[])", name='task_priority_check'),
    sa.CheckConstraint("status::text = ANY (ARRAY['todo'::character varying, 'in_progress'::character varying, 'done'::character varying, 'cancelled'::character varying]::text[])", name='task_status_check'),
    sa.ForeignKeyConstraint(['assignee_id'], ['user.id'], name='fk_task_assignee_id_user', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['creator_id'], ['user.id'], name='fk_task_creator_id_user', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], name='fk_task_project_id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='task_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_task_id', 'task', ['id'], unique=False)
    op.create_table('reaction',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('emoji', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('comment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['comment_id'], ['task_comment.id'], name='reaction_comment_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='reaction_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='reaction_pkey')
    )
    op.create_index('ix_reaction_user_id', 'reaction', ['user_id'], unique=False)
    op.create_index('ix_reaction_id', 'reaction', ['id'], unique=False)
    op.create_index('ix_reaction_comment_id', 'reaction', ['comment_id'], unique=False)
    op.create_table('program_logic',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('input', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('output', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('outcome', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('impact', sa.TEXT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], name='program_logic_project_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='program_logic_pkey')
    )
    op.create_index('ix_program_logic_id', 'program_logic', ['id'], unique=False)
    op.create_table('time_entry',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('duration_minutes', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('ended_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], name='time_entry_task_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='time_entry_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='time_entry_pkey')
    )
    op.create_index('ix_time_entry_id', 'time_entry', ['id'], unique=False)
    op.create_table('user',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('hashed_password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='user_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_user_id', 'user', ['id'], unique=False)
    op.create_index('ix_user_email', 'user', ['email'], unique=True)
    op.create_table('metric',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('unit', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], name='fk_metric_project_id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='metric_pkey')
    )
    op.create_index('ix_metric_name', 'metric', ['name'], unique=False)
    op.create_index('ix_metric_id', 'metric', ['id'], unique=False)
    op.create_table('task_comment',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('mentions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['task_comment.id'], name='task_comment_parent_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], name='task_comment_task_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='task_comment_user_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='task_comment_pkey')
    )
    op.create_index('ix_task_comment_id', 'task_comment', ['id'], unique=False)
    op.create_table('team_member',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('joined_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], name='fk_team_member_project_id', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='fk_team_member_user_id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='team_member_pkey')
    )
    op.create_index('ix_team_member_id', 'team_member', ['id'], unique=False)
    op.create_table('project',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('budget', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], name='project_owner_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='project_pkey')
    )
    op.create_index('ix_project_name', 'project', ['name'], unique=True)
    op.create_index('ix_project_id', 'project', ['id'], unique=False)
    op.drop_index(op.f('ix_grant_success_metrics_id'), table_name='grant_success_metrics')
    op.drop_table('grant_success_metrics')
    op.drop_index(op.f('ix_sector_analytics_sector_name'), table_name='sector_analytics')
    op.drop_index(op.f('ix_sector_analytics_id'), table_name='sector_analytics')
    op.drop_table('sector_analytics')
    op.drop_index(op.f('ix_predictive_models_id'), table_name='predictive_models')
    op.drop_table('predictive_models')
    op.drop_index(op.f('ix_funder_profiles_id'), table_name='funder_profiles')
    op.drop_index(op.f('ix_funder_profiles_funder_name'), table_name='funder_profiles')
    op.drop_table('funder_profiles')
    # ### end Alembic commands ###
